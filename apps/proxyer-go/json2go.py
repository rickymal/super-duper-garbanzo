#!/usr/bin/env python3
"""
json2go.py  –  converte todos os JSON de uma pasta em DTOs Go.

Uso:
    python json2go.py --from ./json --to ./dto
"""

import argparse
import json
import keyword
import os
import re
import textwrap
from pathlib import Path
from typing import Any, Dict

# ───────────────────────── helpers ──────────────────────────


def snake_to_camel(name: str) -> str:
    """snake_case → CamelCase"""
    return "".join(part.capitalize() for part in name.split("_"))


def camel_to_snake(name: str) -> str:
    """CamelCase/Pascal → snake_case (para nome do arquivo)"""
    snake = re.sub(r"([a-z0-9])([A-Z])", r"\1_\2", name)
    snake = re.sub(r"([A-Z])([A-Z][a-z])", r"\1_\2", snake)
    return snake.lower()


def choose_go_type(value: Any) -> str:
    """Mapeia tipo JSON simples → Go"""
    if isinstance(value, str):
        return "string"
    if isinstance(value, bool):
        return "bool"
    if isinstance(value, (int, float)):
        return "float64"
    if isinstance(value, list) or isinstance(value, dict):
        return "interface{}"
    return "interface{}"


def legalize_field(name: str) -> str:
    """Garante que o nome não é reservado em Go."""
    if keyword.iskeyword(name.lower()):
        return name.capitalize() + "_"
    return name


def build_struct(struct_name: str, data: Dict[str, Any]) -> str:
    lines = [f"type {struct_name} struct {{"]

    for key, value in data.items():
        field_name = legalize_field(snake_to_camel(key))
        go_type = choose_go_type(value)
        tag = f'`json:"{key}"`'
        lines.append(f"\t{field_name} {go_type} {tag}")
    lines.append("}")
    return "\n".join(lines)


# ───────────────────────── main ──────────────────────────


def process_file(json_path: Path, out_dir: Path) -> None:
    with json_path.open("r", encoding="utf-8") as fp:
        data = json.load(fp)

    # Nome da struct = nome do arquivo (sem extensão) em CamelCase
    struct_name = snake_to_camel(json_path.stem)

    struct_code = build_struct(struct_name, data)

    out_filename = camel_to_snake(struct_name) + ".go"
    out_path = out_dir / out_filename

    header = textwrap.dedent(
        f"""\
        // Code generated by json2go; DO NOT EDIT.
        // Source: {json_path.name}

        package dto

        """
    )

    out_path.write_text(header + struct_code + "\n", encoding="utf-8")
    print(f"✔︎  {json_path.name} → {out_path.relative_to(out_dir.parent)}")


def main() -> None:
    parser = argparse.ArgumentParser(description="Converte JSON em DTOs Go.")
    parser.add_argument("--from", dest="src", required=True, help="Pasta com JSONs")
    parser.add_argument("--to", dest="dst", required=True, help="Pasta de saída .go")
    args = parser.parse_args()

    src_dir = Path(args.src).resolve()
    dst_dir = Path(args.dst).resolve()
    dst_dir.mkdir(parents=True, exist_ok=True)

    json_files = list(src_dir.glob("*.json"))
    if not json_files:
        print("❗ Nenhum .json encontrado na pasta de origem.")
        return

    for jf in json_files:
        try:
            process_file(jf, dst_dir)
        except Exception as exc:
            print(f"⚠️  Falha ao processar {jf.name}: {exc}")


if __name__ == "__main__":
    main()
